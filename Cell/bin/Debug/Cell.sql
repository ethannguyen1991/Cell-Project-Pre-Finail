/*
Deployment script for Cell_1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Cell_1"
:setvar DefaultFilePrefix "Cell_1"
:setvar DefaultDataPath "C:\Users\EthanNguyen\AppData\Local\Microsoft\VisualStudio\SSDT\CellProject"
:setvar DefaultLogPath "C:\Users\EthanNguyen\AppData\Local\Microsoft\VisualStudio\SSDT\CellProject"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[Admin]...';


GO
CREATE TABLE [dbo].[Admin] (
    [AdminID]  INT           IDENTITY (1, 1) NOT NULL,
    [FName]    VARCHAR (50)  NOT NULL,
    [LName]    VARCHAR (50)  NULL,
    [EmailID]  VARCHAR (100) NULL,
    [UserName] VARCHAR (100) NOT NULL,
    [Password] VARCHAR (100) NOT NULL,
    [IsActive] BIT           NOT NULL,
    CONSTRAINT [PK_Admin] PRIMARY KEY CLUSTERED ([AdminID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Comment]...';


GO
CREATE TABLE [dbo].[Comment] (
    [CommentID]  INT           IDENTITY (1, 1) NOT NULL,
    [ScenarioID] INT           NOT NULL,
    [ContentID]  INT           NULL,
    [StudentID]  INT           NOT NULL,
    [CreatedOn]  DATETIME      NOT NULL,
    [IsActive]   BIT           NOT NULL,
    [Comments]   VARCHAR (MAX) NULL,
    [Grade]      VARCHAR (50)  NULL,
    CONSTRAINT [PK_Comment] PRIMARY KEY CLUSTERED ([CommentID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Content]...';


GO
CREATE TABLE [dbo].[Content] (
    [ContentID]          INT           IDENTITY (1, 1) NOT NULL,
    [HeadingID]          VARCHAR (100) NOT NULL,
    [HeadingText]        VARCHAR (100) NOT NULL,
    [Contents]           VARCHAR (MAX) NOT NULL,
    [Image]              VARCHAR (200) NULL,
    [HasCommentBox]      BIT           NOT NULL,
    [HasButtons]         BIT           NOT NULL,
    [Link1Caption]       VARCHAR (150) NULL,
    [Link1Description]   VARCHAR (MAX) NULL,
    [Link2Caption]       VARCHAR (150) NULL,
    [Link2Description]   VARCHAR (MAX) NULL,
    [Link3Caption]       VARCHAR (150) NULL,
    [Link3Description]   VARCHAR (MAX) NULL,
    [Link4Caption]       VARCHAR (150) NULL,
    [Link4Description]   VARCHAR (MAX) NULL,
    [Link5Caption]       VARCHAR (150) NULL,
    [Link5Description]   VARCHAR (MAX) NULL,
    [Link6Caption]       VARCHAR (150) NULL,
    [Link6Description]   VARCHAR (MAX) NULL,
    [IsCreatedByStudent] BIT           NOT NULL,
    [CreatedBy]          INT           NOT NULL,
    [CreatedOn]          DATETIME      NOT NULL,
    [IsActive]           BIT           NOT NULL,
    CONSTRAINT [PK_Content] PRIMARY KEY CLUSTERED ([ContentID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Electives]...';


GO
CREATE TABLE [dbo].[Electives] (
    [electiveId] INT           IDENTITY (1, 1) NOT NULL,
    [ScenarioId] INT           NULL,
    [text]       VARCHAR (150) NULL,
    CONSTRAINT [PK_Electives] PRIMARY KEY CLUSTERED ([electiveId] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Scenario]...';


GO
CREATE TABLE [dbo].[Scenario] (
    [ScenarioID]         INT            IDENTITY (1, 1) NOT NULL,
    [Name]               VARCHAR (100)  NOT NULL,
    [Welcome]            VARCHAR (MAX)  NULL,
    [LearnAbout]         NVARCHAR (MAX) NULL,
    [Desciption]         NVARCHAR (MAX) NULL,
    [Details]            VARCHAR (MAX)  NOT NULL,
    [Rank]               VARCHAR (50)   NULL,
    [Image]              VARCHAR (200)  NULL,
    [IsCreatedByStudent] BIT            NOT NULL,
    [CreatedBy]          INT            NOT NULL,
    [CreatedOn]          DATETIME       NOT NULL,
    [IsActive]           BIT            NOT NULL,
    CONSTRAINT [PK_Scenario] PRIMARY KEY CLUSTERED ([ScenarioID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[ScenarioContent]...';


GO
CREATE TABLE [dbo].[ScenarioContent] (
    [ScenarioContentID] INT IDENTITY (1, 1) NOT NULL,
    [ScenarioID]        INT NOT NULL,
    [ContentID]         INT NOT NULL,
    [IsActive]          BIT NOT NULL,
    CONSTRAINT [PK_ScenarioContent] PRIMARY KEY CLUSTERED ([ScenarioContentID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Student_Table]...';


GO
CREATE TABLE [dbo].[Student_Table] (
    [studentId]   INT           IDENTITY (1, 1) NOT NULL,
    [firstName]   VARCHAR (MAX) NULL,
    [lastName]    VARCHAR (MAX) NULL,
    [email]       VARCHAR (MAX) NULL,
    [userName]    VARCHAR (MAX) NULL,
    [password]    VARCHAR (MAX) NULL,
    [IsAllowEdit] BIT           NOT NULL,
    [IsActive]    BIT           NULL,
    CONSTRAINT [PK_Student_Table] PRIMARY KEY CLUSTERED ([studentId] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SubContent]...';


GO
CREATE TABLE [dbo].[SubContent] (
    [SubContentID] INT IDENTITY (1, 1) NOT NULL,
    [ParentID]     INT NOT NULL,
    [ChildID]      INT NOT NULL,
    [IsActive]     BIT NOT NULL,
    CONSTRAINT [PK_SubContent] PRIMARY KEY CLUSTERED ([SubContentID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[AdminLogin]...';


GO
CREATE PROC [dbo].[AdminLogin]
	@UserName			VARCHAR(100),
	@Password			VARCHAR(100),
	@AdminID			INT OUT
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (SELECT 1 FROM [Admin] WHERE UserName = @UserName AND [Password] = @Password AND IsActive = 1)
	BEGIN
		SELECT 
			@AdminID = AdminID 
		FROM 
			[Admin] 
		WHERE 
			UserName = @UserName 
		AND 
			[Password] = @Password
	END
END
GO
PRINT N'Creating [dbo].[DELETE_STUDENT]...';


GO
CREATE PROC [dbo].[DELETE_STUDENT]
@studentId		INT
AS
BEGIN
	DELETE FROM Student_Table WHERE studentId = @studentId
END
GO
PRINT N'Creating [dbo].[DeleteContent]...';


GO
CREATE PROC [dbo].[DeleteContent]
@ContentId		INT
AS
BEGIN
DELETE FROM Content WHERE ContentID = @ContentId;
END
GO
PRINT N'Creating [dbo].[DeleteScenario]...';


GO
CREATE PROC [dbo].[DeleteScenario]
@ScenarioID	INT
AS
BEGIN
DELETE FROM Scenario WHERE ScenarioID = @ScenarioID
END
GO
PRINT N'Creating [dbo].[DeleteSubContent]...';


GO
CREATE PROC [dbo].[DeleteSubContent]
@ParentId		INT
AS
BEGIN
DELETE FROM SubContent WHERE ParentID = @ParentId 
END
GO
PRINT N'Creating [dbo].[GET_ADMIN_PROFILE]...';


GO
CREATE PROC [dbo].[GET_ADMIN_PROFILE]
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
	AD.FName AS FIRSTNAME,
	AD.LName AS LASTNAME,
	AD.EmailID     AS EMAIL,
	AD.UserName  AS USERNAME
	FROM Admin  AD 
END
GO
PRINT N'Creating [dbo].[GET_STUDENT]...';


GO
CREATE PROC	[dbo].[GET_STUDENT]
AS
BEGIN
	
	SELECT  
	ST.studentId AS STUDENTID,st.IsAllowEdit,
	(ST.firstName+ST.lastName) AS STUDENTNAME
	FROM Student_Table ST
END
GO
PRINT N'Creating [dbo].[GET_STUDENT_LIST_FOR_GRADE]...';


GO
CREATE PROC [dbo].[GET_STUDENT_LIST_FOR_GRADE]
AS
BEGIN

	SELECT 
			CMT.Comments							AS COMMENT,
			CMT.ScenarioID							AS SCID,
			(ST.firstName+ST.lastName)	AS STUDENTNAME,
			CMT.[Grade]								AS GRADE,
			SC.Name									AS LEVEL,
			CMT.CommentID							AS COMMENTID
			 
	FROM	
			Comment	 AS CMT

			INNER JOIN

			Scenario AS SC

			ON      
				CMT.ScenarioID = SC.ScenarioID

			INNER JOIN

			Student_Table		AS ST

			ON		
				ST.[studentId]  = CMT.StudentID
END
GO
PRINT N'Creating [dbo].[GET_STUDENT_PROFILE]...';


GO
CREATE PROC [dbo].[GET_STUDENT_PROFILE]
@studentId	INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
	ST.firstName AS FIRSTNAME,
	ST.lastName  AS LASTNAME,
	ST.email     AS EMAIL,
	ST.userName  AS USERNAME
	FROM Student_Table  ST 

	WHERE ST.[studentId] = @studentId
END
GO
PRINT N'Creating [dbo].[REGISTER_STUDENT]...';


GO
CREATE PROC [dbo].[REGISTER_STUDENT]
(
@firstName		VARCHAR(MAX),
@lastName		VARCHAR(MAX),
@email			VARCHAR(MAX),
@userName		VARCHAR(MAX),
@password		VARCHAR(MAX),
@isActive		BIT

)
AS

BEGIN
	
	SET NOCOUNT ON;

		INSERT INTO [dbo].[Student_Table]
		(
			[firstName],
			[lastName],
			[email],
			[userName],
			[password],
			IsActive,
			IsAllowEdit
		)
		VALUES
		(
			@firstName,
			@lastName,
			@email,
			@userName,
			@password,
			@isActive,
			0

		)

END
GO
PRINT N'Creating [dbo].[SaveComment]...';


GO
CREATE PROC [dbo].[SaveComment]
	@ScenarioID					INT,
	@ContentID					INT = NULL,
	@StudentID					INT,
	@Comment					VARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO
		Comment(ScenarioID, ContentID, StudentID, CreatedOn, IsActive,Comments)
	VALUES
		(@ScenarioID, @ContentID, @StudentID, GETDATE(), 1,@Comment)
END
GO
PRINT N'Creating [dbo].[SaveContent]...';


GO
CREATE PROC [dbo].[SaveContent]
	@ContentID					INT,
	@HeadingID					VARCHAR(100),
	@HeadingText				VARCHAR(100),
	@Contents					VARCHAR(MAX),
	@Image						VARCHAR(200) = NULL,
	@Link1Caption					varchar(150),
	@Link1Description					varchar(MAX),
	@Link2Caption					varchar(150),
	@Link2Description					varchar(MAX),
	@Link3Caption					varchar(150),
	@Link3Description					varchar(MAX),
	@Link4Caption					varchar(150),
	@Link4Description					varchar(MAX),
	@Link5Caption					varchar(150),
	@Link5Description					varchar(MAX),
	@Link6Caption					varchar(150),
	@Link6Description					varchar(MAX),
	@HasCommentBox				BIT,
	@HasButtons					BIT,
	@IsCreatedByStudent			BIT,
	@CreatedBy					INT,
	@NewContentID				INT OUT
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (SELECT 1 FROM Content WHERE ContentID = @ContentID AND @ContentID != -1)
	BEGIN
		UPDATE
			Content
		SET
			HeadingID = @HeadingID, HeadingText = @HeadingText, Contents = @Contents,
			[Image] = @Image, HasCommentBox = @HasCommentBox, 
			Link1Caption=@Link1Caption,
			Link1Description=@Link1Description,
			Link2Caption=@Link2Caption,
			Link2Description=@Link2Description,
			Link3Caption=@Link3Caption,
			Link3Description=@Link3Description,
			Link4Caption=@Link4Caption,
			Link4Description=@Link4Description,
			Link5Caption=@Link5Caption,
			Link5Description=@Link5Description,
			Link6Caption=@Link6Caption,
			Link6Description=@Link6Description,
			HasButtons = @HasButtons
		WHERE
			ContentID = @ContentID;

		SET
			@NewContentID = @ContentID;
	END

	ELSE
	BEGIN
		INSERT INTO
			Content(HeadingID, HeadingText, Contents, [Image], HasCommentBox, Link1Caption,Link1Description,Link2Caption,Link2Description,Link3Caption,Link3Description,
			Link4Caption,Link4Description,
			Link5Caption,Link5Description,
			Link6Caption,Link6Description,
			HasButtons, IsCreatedByStudent,
			CreatedBy, CreatedOn, IsActive)
		VALUES
			(@HeadingID, @HeadingText, @Contents, @Image, @HasCommentBox, @Link1Caption,@Link1Description,@Link2Caption,@Link2Description,@Link3Caption,@Link3Description,
			@Link4Caption,@Link4Description,
			@Link5Caption,@Link5Description,
			@Link6Caption,@Link6Description,
			@HasButtons, @IsCreatedByStudent,
			@CreatedBy, GETDATE(), 1);

		SET
			@NewContentID = SCOPE_IDENTITY();
	END
END
GO
PRINT N'Creating [dbo].[SaveScenario]...';


GO
CREATE PROC [dbo].[SaveScenario]
	@ScenarioID					INT,
	@Name						VARCHAR(50),
	@Welcome					VARCHAR(MAX),
	@LearnAbt					VARCHAR(MAX),
	@Desc					VARCHAR(MAX),
	@Details					VARCHAR(MAX),
	@Rank						VARCHAR(50),
	@Image						VARCHAR(200) = NULL,
	@IsCreatedByStudent			BIT,
	@CreatedBy					INT,
	@NewScenarioID				INT OUT
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (SELECT 1 FROM Scenario WHERE ScenarioID = @ScenarioID AND @ScenarioID != -1)
	BEGIN
		UPDATE
			Scenario
		SET
			Name = @Name, Welcome = @Welcome, LearnAbout = @LearnAbt,Desciption = @Desc,Details = @Details,[Rank]=@Rank,[Image] = @Image, 
			IsCreatedByStudent = @IsCreatedByStudent, IsActive = 1
		WHERE
			ScenarioID = @ScenarioID
		SET
			@NewScenarioID = @ScenarioID
	END

	ELSE
	BEGIN
		INSERT INTO
			Scenario(Name,Welcome,LearnAbout,Desciption, Details, [Rank],[Image], IsCreatedByStudent, CreatedBy, CreatedOn, IsActive)
		VALUES
			(@Name,@Welcome,@LearnAbt,@Desc, @Details,@Rank, @Image,@IsCreatedByStudent, @CreatedBy, GETDATE(), 1)

		SET
			@NewScenarioID = SCOPE_IDENTITY();
	END
END
GO
PRINT N'Creating [dbo].[SaveScenarioContent]...';


GO
CREATE PROC [dbo].[SaveScenarioContent]
	@ScenarioID				INT,
	@ContentID				INT,
	@IsDeleted				INT
AS
BEGIN
	SET NOCOUNT ON;

	IF(@IsDeleted = 1)
	BEGIN
		DELETE FROM 
			ScenarioContent 
		WHERE 
			ScenarioID = @ScenarioID 
		AND 
			ContentID = @ContentID
	END

	ELSE
	BEGIN
		INSERT INTO
			ScenarioContent(ScenarioID, ContentID, IsActive)
		VALUES
			(@ScenarioID, @ContentID, 1)
	END
END
GO
PRINT N'Creating [dbo].[SaveSubContent]...';


GO
CREATE PROC [dbo].[SaveSubContent]
	@ParentID				INT,
	@ChildID				INT,
	@IsDeleted				INT
AS
BEGIN
	SET NOCOUNT ON;

	--IF(@IsDeleted = 1)
	--BEGIN
	--	DELETE FROM 
	--		SubContent 
	--	WHERE 
	--		ParentID = @ParentID 
	--	AND 
	--		ChildID = @ChildID
	--END

	--ELSE
	--BEGIN
	--	IF (@ParentID != @ChildID)
	--	BEGIN
			INSERT INTO
				SubContent(ParentID, ChildID, IsActive)
			VALUES
				(@ParentID, @ChildID, 1)
	--	END
	--END
END
GO
PRINT N'Creating [dbo].[SaveUpdateScenario]...';


GO
CREATE PROC [dbo].[SaveUpdateScenario]
	@ScenarioID					INT,
	@Welcome					VARCHAR(MAX),
	@LearnAbt					VARCHAR(MAX),
	@Desc					VARCHAR(MAX),
	@Details					VARCHAR(MAX)
	
AS
BEGIN
	SET NOCOUNT ON;

		UPDATE
			Scenario
		SET
			Welcome = @Welcome, LearnAbout = @LearnAbt,Desciption = @Desc,Details = @Details
		WHERE
			ScenarioID = @ScenarioID
		
END
GO
PRINT N'Creating [dbo].[SHOW_GRADE_TO_STUDENT]...';


GO
CREATE PROC [dbo].[SHOW_GRADE_TO_STUDENT]
@studentId		INT
AS
BEGIN
	
	SELECT 
	
	CT.Comments  AS COMMENT,
	SC.Name		 AS LEVEL,
	CT.Grade     AS GRADE	 
	
	FROM Comment AS CT

	INNER JOIN

	Scenario	AS SC	

	ON	CT.ScenarioID	= SC.ScenarioID

	WHERE CT.StudentID  = @studentId

END
GO
PRINT N'Creating [dbo].[ShowContent]...';


GO
CREATE PROC [dbo].[ShowContent]
	@UserID						INT,
	@ContentID					INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		CONT.ContentID			AS ContentID,
		CONT.HeadingID			AS HeadingID,
		CONT.HeadingText		AS HeadingText,
		CONT.[Image]			AS [Image],
		CONT.Contents			AS Contents,
		CONT.HasCommentBox		AS HasCommentBox,
		CONT.HasButtons			AS HasButtons,
		CONT.Link1Caption	as  Link1Caption,
		CONT.Link2Caption	as  Link2Caption,
		CONT.Link3Caption	as  Link3Caption,
		CONT.Link4Caption	as  Link4Caption,
		CONT.Link5Caption	as  Link5Caption,
		CONT.Link6Caption	as  Link6Caption,
		cont.Link1Description as Link1Description,
		cont.Link2Description as Link2Description,
		cont.Link3Description as Link3Description,
		cont.Link4Description as Link4Description,
		cont.Link5Description as Link5Description,
		cont.Link6Description as Link6Description
	FROM
		Content					AS CONT
	WHERE
		CONT.IsActive = 1
	AND
		(CONT.ContentID = @ContentID OR @ContentID IS NULL)
END
GO
PRINT N'Creating [dbo].[ShowContentByScenarioID]...';


GO
CREATE PROC [dbo].[ShowContentByScenarioID]
	@UserID						INT,
	@ScenarioID					INT 
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		CONT.ContentID			AS ContentID,
		CONT.HeadingID			AS HeadingID,
		CONT.HeadingText		AS HeadingText
	FROM
		Content					AS CONT
	INNER JOIN
		ScenarioContent			AS SC
	ON
		CONT.ContentID = SC.ContentID
	WHERE
		CONT.IsActive = 1
	AND
		(SC.ScenarioID = @ScenarioID)
END
GO
PRINT N'Creating [dbo].[ShowScenario]...';


GO
CREATE PROC [dbo].[ShowScenario]
	@UserID						INT = NULL,
	@ScenarioID					INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		--'Scenario ' + 
		--CONVERT(VARCHAR, ROW_NUMBER() 
		--OVER(PARTITION BY ScenarioID ORDER BY ScenarioID ASC)) AS ScenarioNumber,
		SCN.Name				AS ScenarioNumber,
		SCN.ScenarioID			AS ScenarioID,
		SCN.Name				AS Name,
		SCN.Welcome				AS Welcome,
		SCN.LearnAbout				AS LearnAbout,
		scn.Desciption			as Desciption,
		SCN.Details				AS Details,
		SCN.[Image]				AS [Image],
		SCN.[Rank]				AS [Rank]
		
	FROM 
		Scenario				AS SCN
	WHERE
		SCN.IsActive = 1
	AND
		(SCN.ScenarioID = @ScenarioID OR @ScenarioID IS NULL)
END
GO
PRINT N'Creating [dbo].[ShowSubContentByContentID]...';


GO
CREATE PROC [dbo].[ShowSubContentByContentID] 
	@UserID						INT = NULL,
	@ContentID					INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		CONT.ContentID			AS ContentID,
		CONT.HeadingID			AS HeadingID,
		CONT.HeadingText		AS HeadingText
	FROM
		SubContent				AS SC
	INNER JOIN
		Content					AS CONT
	ON
		SC.ChildID = CONT.ContentID
	WHERE
		SC.ParentID = @ContentID
END
GO
PRINT N'Creating [dbo].[STUDENT_LOGIN]...';


GO
CREATE PROC [dbo].[STUDENT_LOGIN]

	@UserName			VARCHAR(100),
	@Password			VARCHAR(100),
	@StudentId			INT OUT,
	@IsAllowEdit		bit OUT
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (SELECT 1 FROM [dbo].[Student_Table] WHERE userName = @UserName AND [Password] = @Password AND IsActive = 1)
	BEGIN
		SELECT 
			@StudentId = studentId,
			@IsAllowEdit=IsAllowEdit
		FROM 
			[dbo].[Student_Table]
		WHERE 
			userName = @UserName 
		AND 
			[Password] = @Password
	END
END
GO
PRINT N'Creating [dbo].[UPDATE_ADMIN_PROFILE]...';


GO
CREATE PROC [dbo].[UPDATE_ADMIN_PROFILE]
@firstName		VARCHAR(MAX),
@lastName		VARCHAR(MAX),
@email			VARCHAR(MAX),
@userName		VARCHAR(MAX)
AS
BEGIN
	UPDATE		Admin 
    SET			FName = @firstName,
				LName  = @lastName,
				EmailID	  = @email,
				UserName  = @userName
		
	WHERE		UserName = @userName;	
END
GO
PRINT N'Creating [dbo].[UPDATE_GRADE]...';


GO
CREATE PROC [dbo].[UPDATE_GRADE]
@commentId			INT,
@grade				VARCHAR(MAX)

AS
BEGIN
		UPDATE Comment
		
		SET		Grade = @grade 

		WHERE	CommentID = @commentId;
END
GO
PRINT N'Creating [dbo].[UPDATE_STUDENT_Permission]...';


GO
create PROC [dbo].[UPDATE_STUDENT_Permission]
@StudenttId			INT,
@IsAllowEdit        bit

AS
BEGIN
	UPDATE Student_Table

    SET IsAllowEdit = @IsAllowEdit
		
		WHERE studentId = @StudenttId;	
END
GO
PRINT N'Creating [dbo].[UPDATE_STUDENT_PROFILE]...';


GO
CREATE PROC [dbo].[UPDATE_STUDENT_PROFILE]
@firstName		VARCHAR(MAX),
@lastName		VARCHAR(MAX),
@email			VARCHAR(MAX),
@userName		VARCHAR(MAX)
AS
BEGIN
	UPDATE Student_Table

    SET firstName = @firstName,
		lastName  = @lastName,
		email	  = @email,
		userName  = @userName
		
		WHERE userName = @userName;	
END
GO
PRINT N'Update complete.';


GO
